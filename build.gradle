plugins {
	id 'java-library'
    id 'maven-publish'
	id 'signing'
    id 'org.jreleaser' version '1.18.0'
}

group = 'net.arnx'
version = '0.10.1'

repositories {
    mavenCentral()
}

dependencies {
	testImplementation "org.json:json:20250517"
    testImplementation "org.junit.jupiter:junit-jupiter:5.12.2"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs += "-Xlint:-options"
}

compileTestJava {
	options.encoding = 'UTF-8'
	options.compilerArgs += "-Xlint:-options"
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

javadoc {
	options.with {
		links(JavaVersion.current().isJava11Compatible() ? 
			'https://docs.oracle.com/en/java/javase/11/docs/api' : 
			'https://docs.oracle.com/javase/8/docs/api/')
		locale = 'en_US'
		encoding = 'UTF-8'
		docEncoding = 'UTF-8'
		charSet = 'UTF-8'
		author = true
	}
	options.addBooleanOption('html5', 
		JavaVersion.current().isJava9Compatible())
	options.addBooleanOption('Xdoclint:none', true)
}

task generateTable(type: JavaExec) {
	mainClass = 'net.arnx.jef4j.tools.FujitsuCharsetTableGenerator'
    classpath = sourceSets.test.runtimeClasspath
}

task generateIndex(type: JavaExec) {
	mainClass = 'net.arnx.jef4j.tools.FujitsuCharsetIndexGenerator'
    classpath = sourceSets.test.runtimeClasspath
}

publishing {
    publications {
        mavenJava(MavenPublication) {
			groupId = 'net.arnx'
            artifactId = 'jef4j'

            from components.java

			pom {
				name = 'jef4j'
				description = 'JEF charset support for Java'
				url = 'https://github.com/hidekatsu-izuno/jef4j'
				inceptionYear = "2025"

				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = 'hidekatsu.izuno'
						name = 'Hidekatsu Izuno'
						email = 'hidekatsu.izuno@gmail.com'
					}
				}

				scm {
					url = 'https://github.com/hidekatsu-izuno/jef4j'
					connection = 'scm:git:git://github.com/hidekatsu-izuno/jef4j.git'
					developerConnection = 'scm:git:ssh:git@github.com:hidekatsu-izuno/jef4j.git'
				}
            }
		}
	}
	
	repositories {
		maven {
			url = layout.buildDirectory.dir('staging-deploy')
		}
	}
}

def pgpPublicKey = project.property("pgpPublicKey")
def pgpSecretKey = project.property("pgpSecretKey")

jreleaser {
	signing {
		active = "ALWAYS"
		armored = true
		mode = "FILE"
        publicKey = pgpPublicKey
        secretKey = pgpSecretKey
	}
	deploy {
		maven {
			mavenCentral {
				sonatype {
					active = "ALWAYS"
					url = "https://central.sonatype.com/api/v1/publisher"
					stagingRepository("build/staging-deploy")
				}
			}
		}
	}
	release {
        github {
            skipRelease = true
			skipTag = true
        }
    }
}

// ./gradlew build
// git tag vX.X.X && git push origin --tags
// ./gradlew clean
// ./gradlew publish
// ./gradlew jreleaserFullRelease --stacktrace
